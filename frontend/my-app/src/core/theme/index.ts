import { DefaultTheme } from "styled-components";
import "@fontsource/roboto";
import lightmode from "../../assets/images/lightmode.jpg";
import "../googlematerial/theme.css";

const theme : DefaultTheme = {
    size: (value: number, sizeMultiplicator = 4) => {
        return value * sizeMultiplicator
    },

    typography: {
        heading: 'Roboto, sans-serif',
        body: 'Roboto, sans-serif',
    },

    themode: {
        primary: 'var(--md-sys-color-primary)',
        primaryText: 'var(--md-sys-color-primary-text)',
        onPrimary: 'var(--md-sys-color-on-primary)',
        onPrimaryText: 'var(--md-sys-color-on-primary-text)',
        primaryContainer: 'var(--md-sys-color-primary-container)',
        primaryContainerText: 'var(--md-sys-color-primary-container-text)',
        onPrimaryContainer: 'var(--md-sys-color-on-primary-container)',
        onPrimaryContainerText: 'var(--md-sys-color-on-primary-container-text)',
        secondary: 'var(--md-sys-color-secondary)',
        secondaryText: 'var(--md-sys-color-secondary-text)',
        onSecondary: 'var(--md-sys-color-on-secondary)',
        onSecondaryText: 'var(--md-sys-color-on-secondary-text)',
        secondaryContainer: 'var(--md-sys-color-secondary-container)',
        secondaryContainerText: 'var(--md-sys-color-secondary-container-text)',
        onSecondaryContainer: 'var(--md-sys-color-on-secondary-container)',
        onSecondaryContainerText: 'var(--md-sys-color-on-secondary-container-text)',
        tertiary: 'var(--md-sys-color-tertiary)',
        tertiaryText: 'var(--md-sys-color-tertiary-text)',
        onTertiary: 'var(--md-sys-color-on-tertiary)',
        onTertiaryText: 'var(--md-sys-color-on-tertiary-text)',
        tertiaryContainer: 'var(--md-sys-color-tertiary-container)',
        tertiaryContainerText: 'var(--md-sys-color-tertiary-container-text)',
        onTertiaryContainer: 'var(--md-sys-color-on-tertiary-container)',
        onTertiaryContainerText: 'var(--md-sys-color-on-tertiary-container-text)',
        error: 'var(--md-sys-color-error)',
        errorText: 'var(--md-sys-color-error-text)',
        onError: 'var(--md-sys-color-on-error)',
        onErrorText: 'var(--md-sys-color-on-error-text)',
        errorContainer: 'var(--md-sys-color-error-container)',
        errorContainerText: 'var(--md-sys-color-error-container-text)',
        onErrorContainer: 'var(--md-sys-color-on-error-container)',
        onErrorContainerText: 'var(--md-sys-color-on-error-container-text)',
        background: 'var(--md-sys-color-background)',
        backgroundText: 'var(--md-sys-color-background-text)',
        onBackground: 'var(--md-sys-color-on-background)',
        onBackgroundText: 'var(--md-sys-color-on-background-text)',
        surface: 'var(--md-sys-color-surface)',
        surfaceText: 'var(--md-sys-color-surface-text)',
        onSurface: 'var(--md-sys-color-on-surface)',
        onSurfaceText: 'var(--md-sys-color-on-surface-text)',
        surfaceVariant: 'var(--md-sys-color-surface-variant)',
        surfaceVariantText: 'var(--md-sys-color-surface-variant-text)',
        onSurfaceVariant: 'var(--md-sys-color-on-surface-variant)',
        onSurfaceVariantText: 'var(--md-sys-color-on-surface-variant-text)',
        outline: 'var(--md-sys-color-outline)',
        outlineText: 'var(--md-sys-color-outline-text)',
        inverseOnSurface: 'var(--md-sys-color-inverse-on-surface)',
        inverseOnSurfaceText: 'var(--md-sys-color-inverse-on-surface-text)',
        inverseSurface: 'var(--md-sys-color-inverse-surface)',
        inverseSurfaceText: 'var(--md-sys-color-inverse-surface-text)',
        inversePrimary: 'var(--md-sys-color-inverse-primary)',
        inversePrimaryText: 'var(--md-sys-color-inverse-primary-text)',
        shadow: 'var(--md-sys-color-shadow)',
        shadowText: 'var(--md-sys-color-shadow-text)',
        surfaceTint: 'var(--md-sys-color-surface-tint)',
        surfaceTintText: 'var(--md-sys-color-surface-tint-text)',
        outlineVariant: 'var(--md-sys-color-outline-variant)',
        outlineVariantText: 'var(--md-sys-color-outline-variant-text)',
        scrim: 'var(--md-sys-color-scrim)',
        scrimText: 'var(--md-sys-color-scrim-text)',
    },
    img: lightmode,
}

export default theme